<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exx.dzj.mapper.stock.StockInfoMapper">

  <resultMap id="BaseResultMap" type="com.exx.dzj.entity.stock.StockInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="stock_code" jdbcType="VARCHAR" property="stockCode" />
    <result column="nature" jdbcType="VARCHAR" property="nature" />
    <result column="stock_name" jdbcType="VARCHAR" property="stockName" />
    <result column="specificate_type" jdbcType="VARCHAR" property="specificateType" />
    <result column="stock_class" jdbcType="VARCHAR" property="stockClass" />
    <result column="stock_class_name" jdbcType="VARCHAR" property="stockClassName" />
    <result column="meter_unit" jdbcType="VARCHAR" property="meterUnit" />
    <result column="pictures" jdbcType="VARCHAR" property="pictures" />
    <result column="bar_code" jdbcType="VARCHAR" property="barCode" />
    <result column="is_shelves" jdbcType="VARCHAR" property="isShelves" />
    <result column="is_enable" jdbcType="INTEGER" property="isEnable" />
    <result column="is_comm_sale" jdbcType="INTEGER" property="isCommSale" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
  </resultMap>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Base_Column_List">
    id, stock_code, nature, stock_name, specificate_type, stock_class, stock_class_name,
    meter_unit, pictures, bar_code, is_shelves, is_enable, is_comm_sale, create_time, create_user,
    update_time, update_user
  </sql>

  <select id="selectByExample" parameterType="com.exx.dzj.entity.stock.StockInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tab_stock_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tab_stock_info
    where id = #{id,jdbcType=INTEGER}
  </select>

  <insert id="insertSelective" parameterType="com.exx.dzj.entity.stock.StockInfo">
    insert into tab_stock_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stockCode != null and stockCode!=''">
        stock_code,
      </if>
      <if test="nature != null and nature != ''">
        nature,
      </if>
      <if test="stockName != null and stockName!=''">
        stock_name,
      </if>
      <if test="specificateType != null and specificateType != ''">
        specificate_type,
      </if>
      <if test="stockClass != null and stockClass!=''">
        stock_class,
      </if>
      <if test="stockClassName != null and stockClassName!=''">
        stock_class_name,
      </if>
      <if test="stockAddress != null and stockAddress!=''">
        stock_address,
      </if>
      <if test="stockAddressCode != null and stockAddressCode!=''">
        stock_address_code,
      </if>
      <if test="meterUnit != null and meterUnit!=''">
        meter_unit,
      </if>
      <if test="pictures != null and pictures!=''">
        pictures,
      </if>
      <if test="barCode != null and barCode!=''">
        bar_code,
      </if>
      <if test="isShelves != null">
        is_shelves,
      </if>
      <if test="sourceMode != null">
        source_mode,
      </if>
      <if test="isEnable != null">
        is_enable,
      </if>
      <if test="isCommSale != null">
        is_comm_sale,
      </if>
      create_time,
      <if test="createUser != null and createUser!=''">
        create_user,
      </if>
      update_time,
      <if test="updateUser != null and updateUser!=''">
        update_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stockCode != null and stockCode!=''">
        #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="nature != null and nature != ''">
        #{nature,jdbcType=VARCHAR},
      </if>
      <if test="stockName != null and stockName!=''">
        #{stockName,jdbcType=VARCHAR},
      </if>
      <if test="specificateType != null and specificateType!=''">
        #{specificateType,jdbcType=VARCHAR},
      </if>
      <if test="stockClass != null and stockClass!=''">
        #{stockClass,jdbcType=VARCHAR},
      </if>
      <if test="stockClassName != null and stockClassName!=''">
        #{stockClassName,jdbcType=VARCHAR},
      </if>
      <if test="stockAddress != null and stockAddress!=''">
        #{stockAddress,jdbcType=VARCHAR},
      </if>
      <if test="stockAddressCode != null and stockAddressCode!=''">
        #{stockAddressCode,jdbcType=VARCHAR},
      </if>
      <if test="meterUnit != null and meterUnit!=''">
        #{meterUnit,jdbcType=VARCHAR},
      </if>
      <if test="pictures != null and pictures!=''">
        #{pictures,jdbcType=VARCHAR},
      </if>
      <if test="barCode != null and barCode!=''">
        #{barCode,jdbcType=VARCHAR},
      </if>
      <if test="isShelves != null">
        #{isShelves,jdbcType=INTEGER},
      </if>
      <if test="sourceMode != null">
        #{sourceMode,jdbcType=INTEGER},
      </if>
      <if test="isEnable != null">
        #{isEnable,jdbcType=INTEGER},
      </if>
      <if test="isCommSale != null">
        #{isCommSale,jdbcType=INTEGER},
      </if>
      SYSDATE(),
      <if test="createUser != null and createUser!=''">
        #{createUser,jdbcType=VARCHAR},
      </if>
      SYSDATE(),
      <if test="updateUser != null and updateUser!=''">
        #{updateUser,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="com.exx.dzj.entity.stock.StockInfoExample" resultType="java.lang.Long">
    select count(*) from tab_stock_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <update id="updateByExampleSelective" parameterType="map">
    update tab_stock_info
    <set>
      <if test="record.nature != null">
        nature = #{record.nature,jdbcType=VARCHAR},
      </if>
      <if test="record.stockName != null">
        stock_name = #{record.stockName,jdbcType=VARCHAR},
      </if>
      <if test="record.specificateType != null">
        specificate_type = #{record.specificateType,jdbcType=VARCHAR},
      </if>
      <if test="record.stockClass != null">
        stock_class = #{record.stockClass,jdbcType=VARCHAR},
      </if>
      <if test="record.stockClassName != null">
        stock_class_name = #{record.stockClassName,jdbcType=VARCHAR},
      </if>
      <if test="record.meterUnit != null">
        meter_unit = #{record.meterUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.pictures != null">
        pictures = #{record.pictures,jdbcType=VARCHAR},
      </if>
      <if test="record.barCode != null">
        bar_code = #{record.barCode,jdbcType=VARCHAR},
      </if>
      <if test="record.isEnable != null">
        is_enable = #{record.isEnable,jdbcType=INTEGER},
      </if>
      <if test="record.isCommSale != null">
        is_comm_sale = #{record.isCommSale,jdbcType=INTEGER},
      </if>
      update_time = SYSDATE(),
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="com.exx.dzj.entity.stock.StockInfo">
    update tab_stock_info
    <set>
      <if test="nature != null">
        nature = #{nature,jdbcType=VARCHAR},
      </if>
      <if test="stockName != null and stockName!=''">
        stock_name = #{stockName,jdbcType=VARCHAR},
      </if>
      <if test="specificateType != null and specificateType!=''">
        specificate_type = #{specificateType,jdbcType=VARCHAR},
      </if>
      <if test="stockClass != null and stockClass!=''">
        stock_class = #{stockClass,jdbcType=VARCHAR},
      </if>
      <if test="stockClassName != null and stockClassName!=''">
        stock_class_name = #{stockClassName,jdbcType=VARCHAR},
      </if>
      <if test="stockAddress != null and stockAddress!=''">
        stock_address = #{stockAddress,jdbcType=VARCHAR},
      </if>
      <if test="stockAddressCode != null and stockAddressCode!=''">
        stock_address_code = #{stockAddressCode,jdbcType=VARCHAR},
      </if>
      <if test="meterUnit != null and meterUnit!=''">
        meter_unit = #{meterUnit,jdbcType=VARCHAR},
      </if>
      <if test="pictures != null and pictures!=''">
        pictures = #{pictures,jdbcType=VARCHAR},
      </if>
      <if test="barCode != null and barCode!=''">
        bar_code = #{barCode,jdbcType=VARCHAR},
      </if>
      <if test="isShelves != null and isShelves!=''">
        is_shelves = #{isShelves,jdbcType=VARCHAR},
      </if>
      <if test="isEnable != null">
        is_enable = #{isEnable,jdbcType=INTEGER},
      </if>
      <if test="isCommSale != null">
        is_comm_sale = #{isCommSale,jdbcType=INTEGER},
      </if>
      update_time = SYSDATE(),
      <if test="updateUser != null and updateUser!=''">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
    </set>
    where stock_code = #{stockCode,jdbcType=VARCHAR}
  </update>

  <!-- ********************************* -->

  <!-- 列表 SQL 片段 -->
  <sql id="QueryStockListSQL">
    SELECT
      concat_ws(
          '/',
          ti.stock_name,
          ti.specificate_type
      ) AS `value`,
      ti.stock_code stockCode,
      ti.stock_address stockAddress,
      ti.stock_address_code stockAddressCode,
      DICTINFO.dict_name warehouseName,
      concat_ws(
          '/',
          ti.stock_name,
          ti.specificate_type
      ) stockNameForSpe,
      ti.stock_class_name stockClassName,
      sn.standard_buy_price standardBuyPrice,
      IFNULL(sn.min_inventory, 0) minInventory,
      sn.standard_sell_price standardSellPrice,
      CASE
    WHEN ti.nature = '1' THEN
        '原材料'
    WHEN ti.nature = '2' THEN
        '在产品'
    WHEN ti.nature = '3' THEN
        '产成品'
    WHEN ti.nature = '4' THEN
        '服务项目'
    ELSE
        '未知'
    END natureName,
        ti.is_shelves isShelves,
      CASE
    WHEN ti.is_shelves = 1 THEN
      '上架'
    WHEN ti.is_shelves = 0 THEN
      '下架'
    WHEN ti.is_shelves = 2 THEN
      '入库'
    WHEN ti.is_shelves = 3 THEN
      '待上架'
    ELSE
      '未知'
    END shelvesName
    FROM
      tab_stock_info ti
    LEFT JOIN tab_stock_num_price sn ON ti.stock_code = sn.stock_code and sn.is_default = 1
    LEFT JOIN tab_dictionary_info DICTINFO ON DICTINFO.dict_code=ti.stock_address AND DICTINFO.data_type='inventory_ship_address'
    WHERE ti.is_enable = 1
  </sql>

  <!-- 查询存货列表数据 -->
  <select id="queryStockList" resultType="com.exx.dzj.entity.stock.StockModel"
          parameterType="com.exx.dzj.entity.stock.StockQuery">
    <include refid="QueryStockListSQL"/>
    <if test="stockName!=null and stockName!=''">
      AND ti.stock_name LIKE CONCAT('%', #{stockName}, '%')
    </if>
    <if test="specificateType!=null and specificateType!=''">
      AND ti.specificate_type LIKE CONCAT('%', #{specificateType}, '%')
    </if>
    <if test="stockClass!=null and stockClass!=''">
      AND ti.stock_class = #{stockClass}
    </if>
    <if test="isShelves!=null">
      AND ti.is_shelves = #{isShelves}
    </if>
    ORDER BY ti.create_time DESC
  </select>

  <select id="queryStockWarningList" resultType="com.exx.dzj.entity.stock.StockModel"
          parameterType="com.exx.dzj.entity.stock.StockQuery">
    SELECT
    concat_ws(
    '/',
    ti.stock_name,
    ti.specificate_type
    ) AS `value`,
    ti.stock_code stockCode,
    ti.stock_address stockAddress,
    ti.stock_address_code stockAddressCode,
    DICTINFO.dict_name warehouseName,
    concat_ws(
    '/',
    ti.stock_name,
    ti.specificate_type
    ) stockNameForSpe,
    ti.stock_class_name stockClassName,
    sn.standard_buy_price standardBuyPrice,
    IFNULL(sn.min_inventory, 0) minInventory,
    sn.standard_sell_price standardSellPrice,
    CASE
    WHEN ti.nature = '1' THEN
    '原材料'
    WHEN ti.nature = '2' THEN
    '在产品'
    WHEN ti.nature = '3' THEN
    '产成品'
    WHEN ti.nature = '4' THEN
    '服务项目'
    ELSE
    '未知'
    END natureName,
    ti.is_shelves isShelves,
    CASE
    WHEN ti.is_shelves = 1 THEN
    '上架'
    WHEN ti.is_shelves = 0 THEN
    '下架'
    WHEN ti.is_shelves = 2 THEN
    '入库'
    WHEN ti.is_shelves = 3 THEN
    '待上架'
    ELSE
    '未知'
    END shelvesName
    FROM
    tab_stock_info ti
    LEFT JOIN tab_stock_num_price sn ON ti.stock_code = sn.stock_code and sn.is_default = 1 and <![CDATA[sn.min_inventory <= 100]]>
    LEFT JOIN tab_dictionary_info DICTINFO ON DICTINFO.dict_code=ti.stock_address AND DICTINFO.data_type='inventory_ship_address'
    WHERE ti.is_enable = 1
    <if test="stockName!=null and stockName!=''">
      AND ti.stock_name LIKE CONCAT('%', #{stockName}, '%')
    </if>
    <if test="specificateType!=null and specificateType!=''">
      AND ti.specificate_type LIKE CONCAT('%', #{specificateType}, '%')
    </if>
    <if test="stockClass!=null and stockClass!=''">
      AND ti.stock_class = #{stockClass}
    </if>
    <if test="isShelves!=null">
      AND ti.is_shelves = #{isShelves}
    </if>
    ORDER BY sn.min_inventory DESC
  </select>

  <select id="queryStockSet">
    <include refid="QueryStockListSQL"/>
    <choose>
      <when test="stockCodes!=null">
        where stock_code in
        <foreach collection="stockCodes" item="item" open="(" close=")" separator=",">#{item}</foreach>
      </when>
      <otherwise>
        where stock_code = null
      </otherwise>
    </choose>
  </select>

  <!-- SQL 片段 -->
  <sql id="QueryStockInfoSql">
    SELECT
      ti.id id,
      ti.stock_code stockCode,
      ti.nature,
      ti.stock_name stockName,
      ti.specificate_type specificateType,
      ti.stock_class stockClass,
      sn.stock_address stockAddress,
      sn.stock_address_code stockAddressCode,
      ti.meter_unit meterUnit,
      ti.pictures,
      ti.bar_code barCode,
      ti.is_comm_sale isCommSale,
      sn.standard_buy_price standardBuyPrice,
      sn.standard_sell_price standardSellPrice,
      sn.max_purchase_price maxPurchasePrice,
      sn.min_sell_price minSellPrice,
      sn.min_inventory minInventory
    FROM
        tab_stock_info ti
    LEFT JOIN tab_stock_num_price sn ON ti.stock_code = sn.stock_code and sn.is_default = 1
    WHERE 1 = 1
  </sql>

  <!-- 查询存货详细信息 -->
  <select id="queryStockInfo" resultType="com.exx.dzj.entity.stock.StockBean">
    <include refid="QueryStockInfoSql"/>
    AND ti.stock_code = #{stockCode}
  </select>

  <!-- 上架、下架 或 删除 -->
  <update id="shelvesStock">
    update tab_stock_info
    <set>
      <if test="isShelves != null">
        is_shelves = #{isShelves},
      </if>
      <if test="isEnable != null">
        is_enable = #{isEnable},
      </if>
      <if test="userCode!=null and userCode!=''">
        update_user = #{userCode},
      </if>
    </set>
    <choose>
      <when test="stockCodes!=null">
        where stock_code in
        <foreach collection="stockCodes" item="item" open="(" close=")" separator=",">#{item}</foreach>
      </when>
      <otherwise>
        where stock_code = null
      </otherwise>
    </choose>
  </update>
  
  <insert id="batchInsertStockInfo">
    INSERT INTO tab_stock_info
      (stock_code, stock_address, stock_address_code, nature, stock_name, specificate_type, stock_class, stock_class_name, meter_unit, pictures,
        bar_code, is_shelves, is_enable, is_comm_sale, create_user, update_user, create_time, update_time)
    VALUES 
    <foreach collection="list" item="item" separator=",">
      (#{item.stockCode}, #{item.stockAddress}, #{item.stockAddressCode}, #{item.nature}, #{item.stockName}, #{item.specificateType}, #{item.stockClass}, #{item.stockClassName}, #{item.meterUnit}, #{item.pictures},
      #{item.barCode}, #{item.isShelves}, #{item.isEnable}, #{item.isCommSale}, #{item.createUser}, #{item.updateUser}, SYSDATE(), SYSDATE())
    </foreach>
  </insert>

  <insert id="batchInsertStockNumPrice">
    INSERT INTO tab_stock_num_price
      (stock_code, standard_buy_price, standard_sell_price, max_purchase_price, min_sell_price, min_inventory, stock_address_code,stock_address, is_enable, create_time, create_user, update_time, update_user)
    VALUES
    <foreach collection="list" item="item" separator=",">
      (#{item.stockCode}, #{item.standardBuyPrice}, #{item.standardSellPrice}, #{item.maxPurchasePrice}, #{item.minSellPrice}, #{item.minInventory}, #{item.stockAddressCode},#{item.stockAddress}, #{item.isEnable}, #{item.createTime}, #{item.createUser}, SYSDATE(), #{item.updateUser})
    </foreach>
  </insert>

  <update id="updateStockGoodsInventory" parameterType="com.exx.dzj.entity.stock.StockBean">
    UPDATE tab_stock_num_price
      SET min_inventory = IFNULL(min_inventory, 0) + #{minInventory}
      WHERE stock_code = #{stockCode} AND stock_address_code = #{stockAddressCode}
  </update>

  <insert id="insertStockNumPrice" parameterType="com.exx.dzj.entity.stock.StockNumPrice">
    INSERT INTO tab_stock_num_price
      (stock_code, min_inventory, standard_buy_price, max_purchase_price)
    VALUES
      ( #{stockCode}, #{minInventory}, #{standardBuyPrice}, #{maxPurchasePrice})
  </insert>

  <update id="updateStockInfoSourceModel" parameterType="com.exx.dzj.entity.stock.StockBean">
    UPDATE tab_stock_info
      <set>
        <if test="sourceMode != null">
          source_mode =#{sourceMode},
        </if>
        <if test="isShelves != null">
          is_shelves =#{isShelves},
        </if>
        <if test="updateUser != null">
          update_user =#{updateUser},
        </if>
      </set>
    WHERE stock_code = #{stockCode}
  </update>
  
  <select id="stockInventoryWarning" resultMap="stockInventoryWarningMap">
    SELECT s.stock_name, s.stock_address, IFNULL(snp.min_inventory,0) AS min_inventory FROM tab_stock_info s
    LEFT JOIN tab_stock_num_price snp ON s.stock_code = snp.stock_code
    WHERE IFNULL(snp.min_inventory, 0) <![CDATA[<=]]> #{warningNum}
  </select>
  
  <resultMap id="stockInventoryWarningMap" type="com.exx.dzj.entity.stock.StockBean">
  <result column="stock_name" property="stockName"/>
  <result column="stock_address" property="stockAddress"/>
  <result column="min_inventory" property="minInventory"/>
  </resultMap>

  <select id="queryStockInfoForPurchaseAudit" resultType="com.exx.dzj.entity.stock.StockBean">
    <include refid="QueryStockInfoSql"/>
    AND ti.stock_code = #{stockCode}
  </select>

  <select id="queryStockNumPirckList" parameterType="com.exx.dzj.entity.stock.StockNumPrice"
          resultType="com.exx.dzj.entity.stock.StockNumPrice">
    SELECT
    stock_code  stockCode,
    standard_buy_price standardBuyPrice,
    standard_sell_price standardSellPrice,
    max_purchase_price maxPurchasePrice,
    min_sell_price minSellPrice,
    min_inventory minInventory,
    stock_address stockAddress,
    stock_address_code stockAddressCode
    FROM
    tab_stock_num_price
    WHERE
    1 = 1
    <if test="stockCodeList != null and stockCodeList.size() > 0">
      AND stock_code IN
      <foreach collection="stockCodeList" separator="," open="(" close=")" item="item">
          #{item}
      </foreach>
    </if>
  </select>

  <select id="queryStockNumPirck" parameterType="com.exx.dzj.entity.stock.StockNumPrice"
          resultType="com.exx.dzj.entity.stock.StockNumPrice">
    SELECT
    stock_code  stockCode,
    standard_buy_price standardBuyPrice,
    standard_sell_price standardSellPrice,
    max_purchase_price maxPurchasePrice,
    min_sell_price minSellPrice,
    min_inventory minInventory,
    stock_address stockAddress,
    stock_address_code stockAddressCode
    FROM
    tab_stock_num_price
    WHERE
    1 = 1
    AND stock_code = #{stockCode}
    AND stock_address_code = #{stockAddressCode}
  </select>

  <insert id="insertStockNumPriceForPurchaseAudit" parameterType="com.exx.dzj.entity.stock.StockNumPrice">
    INSERT INTO tab_stock_num_price
      (stock_code, standard_buy_price, standard_sell_price, max_purchase_price, min_sell_price, min_inventory, stock_address, stock_address_code, is_default, create_user, create_time)
    VALUES
      ( #{stockCode}, #{standardBuyPrice}, #{standardSellPrice}, #{maxPurchasePrice}, #{minSellPrice},#{minInventory}, #{stockAddress}, #{stockAddressCode}, #{isDefault}, #{createUser}, SYSDATE())
  </insert>

  <select id="queryMultipleStocks" resultMap="multipleStockMap">
    SELECT stock_address, stock_address_code FROM tab_stock_num_price WHERE
    stock_code IN
    <foreach collection="list" item="item" close=")" open="(" separator=",">
      #{item}
    </foreach>
    GROUP BY  stock_address_code
  </select>

  <resultMap id="multipleStockMap" type="com.exx.dzj.entity.stock.StockNumPrice">
    <result column="stock_address" property="stockAddress"/>
    <result column="stock_address_code" property="stockAddressCode"/>
  </resultMap>

  <!--<select id="queryStockInfoForSale" resultType="com.exx.dzj.entity.stock.StockBean">-->
    <!--SELECT-->
        <!--stock_code  stockCode,-->
        <!--standard_buy_price standardBuyPrice,-->
        <!--standard_sell_price standardSellPrice,-->
        <!--max_purchase_price maxPurchasePrice,-->
        <!--min_sell_price minSellPrice,-->
        <!--min_inventory minInventory,-->
        <!--stock_address stockAddress,-->
        <!--stock_address_code stockAddressCode-->
    <!--FROM-->
        <!--tab_stock_num_price-->
    <!--WHERE-->
        <!--1 = 1-->
    <!--AND stock_code = #{stockCode}-->
    <!--AND stock_address_code = #{stockAddressCode}-->
  <!--</select>-->
</mapper>